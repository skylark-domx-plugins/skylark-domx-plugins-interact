{"version":3,"sources":["skylark-utils-interact.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","interact","noder","datax","geom","eventer","styler","movable","elm","params","updateWithTouchData","e","keys","changedTouches","overlayDiv","downButton","start","stop","startX","startY","originalPos","size","handleEl","handle","auto","constraints","doc","document","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","cursor","docSize","getDocumentSize","preventDefault","button","screenX","screenY","relativePosition","css","createElement","position","top","left","width","height","zIndex","opacity","append","body","on","move","deltaX","deltaY","l","t","minX","maxX","minY","maxY","off","remove","mover","attr","removeAttr","pagePosition","addClass","Array","prototype","some","mixin","finder","$","resizable","defaultOptions","touchActionNone","direction","right","bottom","border","grabber","selector","startSize","currentSize","isString","find","isHtmlNode","resizer","fn","this","each","el","init","options","classPrefix","appendTo","container","class","handlers","n","data-resize-handler","handler","resizing","target","pageRect","resizingCallback","select","startDim","rectDim","startPos","show","unselect","hide","dnd","widgets","sortable","connectWith","placeholder","placeholderClass","draggingClass","items","index","$container","$items","children","test","tagName","draggable","source","preparing","ghost","dragSource","transfer","text","dragging","ended","placeholders","detach","parent","trigger","item","droppable","acceptable","activeClass","hoverClass","overing","is","overElm","forcePlaceholderSize","outerHeight","not","dropped","filter","after","data","add","sorter","Widget","inherit","klassName","enable","disable","destory","main"],"mappings":"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","file":"../skylark-utils-interact.js","sourcesContent":["define('skylark-utils-interact/interact',[\r\n    \"skylark-utils/skylark\",\r\n    \"skylark-utils/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar interact = skylark.interact = {\r\n\t};\r\n\r\n\treturn interact;\r\n});\r\n\r\n\ndefine('skylark-utils-interact/mover',[\r\n    \"./interact\",\r\n    \"skylark-utils/langx\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/eventer\",\r\n    \"skylark-utils/styler\"\r\n],function(interact, langx,noder,datax,geom,eventer,styler){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    function movable(elm, params) {\r\n        function updateWithTouchData(e) {\r\n            var keys, i;\r\n\r\n            if (e.changedTouches) {\r\n                keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                for (i = 0; i < keys.length; i++) {\r\n                    e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                }\r\n            }\r\n        }\r\n\r\n        params = params || {};\r\n        var handleEl = params.handle || elm,\r\n            auto = params.auto === false ? false : true,\r\n            constraints = params.constraints,\r\n            overlayDiv,\r\n            doc = params.document || document,\r\n            downButton,\r\n            start,\r\n            stop,\r\n            drag,\r\n            startX,\r\n            startY,\r\n            originalPos,\r\n            size,\r\n            startedCallback = params.started,\r\n            movingCallback = params.moving,\r\n            stoppedCallback = params.stopped,\r\n\r\n            start = function(e) {\r\n                var docSize = geom.getDocumentSize(doc),\r\n                    cursor;\r\n\r\n                updateWithTouchData(e);\r\n\r\n                e.preventDefault();\r\n                downButton = e.button;\r\n                //handleEl = getHandleEl();\r\n                startX = e.screenX;\r\n                startY = e.screenY;\r\n\r\n                originalPos = geom.relativePosition(elm);\r\n                size = geom.size(elm);\r\n\r\n                // Grab cursor from handle so we can place it on overlay\r\n                cursor = styler.css(handleEl, \"curosr\");\r\n\r\n                overlayDiv = noder.createElement(\"div\");\r\n                styler.css(overlayDiv, {\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: docSize.width,\r\n                    height: docSize.height,\r\n                    zIndex: 0x7FFFFFFF,\r\n                    opacity: 0.0001,\r\n                    cursor: cursor\r\n                });\r\n                noder.append(doc.body, overlayDiv);\r\n\r\n                eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                if (startedCallback) {\r\n                    startedCallback(e);\r\n                }\r\n            },\r\n\r\n            move = function(e) {\r\n                updateWithTouchData(e);\r\n\r\n                if (e.button !== 0) {\r\n                    return stop(e);\r\n                }\r\n\r\n                e.deltaX = e.screenX - startX;\r\n                e.deltaY = e.screenY - startY;\r\n\r\n                if (auto) {\r\n                    var l = originalPos.left + e.deltaX,\r\n                        t = originalPos.top + e.deltaY;\r\n                    if (constraints) {\r\n\r\n                        if (l < constraints.minX) {\r\n                            l = constraints.minX;\r\n                        }\r\n\r\n                        if (l > constraints.maxX) {\r\n                            l = constraints.maxX;\r\n                        }\r\n\r\n                        if (t < constraints.minY) {\r\n                            t = constraints.minY;\r\n                        }\r\n\r\n                        if (t > constraints.maxY) {\r\n                            t = constraints.maxY;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                geom.relativePosition(elm, {\r\n                    left: l,\r\n                    top: t\r\n                })\r\n\r\n                e.preventDefault();\r\n                if (movingCallback) {\r\n                    movingCallback(e);\r\n                }\r\n            },\r\n\r\n            stop = function(e) {\r\n                updateWithTouchData(e);\r\n\r\n                eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                noder.remove(overlayDiv);\r\n\r\n                if (stoppedCallback) {\r\n                    stoppedCallback(e);\r\n                }\r\n            };\r\n\r\n        eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n        return {\r\n            // destroys the dragger.\r\n            remove: function() {\r\n                eventer.off(handleEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    function mover(){\r\n      return mover;\r\n    }\r\n\r\n    langx.mixin(mover, {\r\n\r\n        movable: movable\r\n\r\n    });\r\n\r\n    return interact.mover = mover;\r\n});\r\n\ndefine('skylark-utils-interact/resizer',[\r\n    \"./interact\",\r\n    \"skylark-utils/langx\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/finder\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/eventer\",\r\n    \"./mover\",\r\n    \"skylark-utils/styler\",\r\n    \"skylark-utils/query\"\r\n],function(interact, langx,noder,datax,finder,geom,eventer,mover,styler,$){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    function resizable(elm, params) {\r\n\r\n        var defaultOptions = {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n\r\n            direction : {\r\n                top: false, \r\n                left: false, \r\n                right: true, \r\n                bottom: true\r\n            },\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        };\r\n\r\n        params = params || {};\r\n        var handle = params.handle || {},\r\n            handleEl,\r\n            direction = params.direction || defaultOptions.direction,\r\n            startSize,\r\n            currentSize,\r\n            startedCallback = params.started,\r\n            movingCallback = params.moving,\r\n            stoppedCallback = params.stopped;\r\n\r\n        if (langx.isString(handle)) {\r\n            handleEl = finder.find(elm,handle);\r\n        } else if (langx.isHtmlNode(handle)) {\r\n            handleEl = handle;\r\n        }\r\n        mover.movable(handleEl,{\r\n            auto : false,\r\n            started : function(e) {\r\n                startSize = geom.size(elm);\r\n                if (startedCallback) {\r\n                    startedCallback(e);\r\n                }\r\n            },\r\n            moving : function(e) {\r\n                currentSize = {\r\n                };\r\n                if (direction.left || direction.right) {\r\n                    currentSize.width = startSize.width + e.deltaX;\r\n                } else {\r\n                    currentSize.width = startSize.width;\r\n                }\r\n\r\n                if (direction.top || direction.bottom) {\r\n                    currentSize.height = startSize.height + e.deltaY;\r\n                } else {\r\n                    currentSize.height = startSize.height;\r\n                }\r\n\r\n                geom.size(elm,currentSize);\r\n\r\n                if (movingCallback) {\r\n                    movingCallback(e);\r\n                }\r\n            },\r\n            stopped: function(e) {\r\n                if (stoppedCallback) {\r\n                    stoppedCallback(e);\r\n                }                \r\n            }\r\n        });\r\n        \r\n        return {\r\n            // destroys the dragger.\r\n            remove: function() {\r\n                eventer.off(handleEl);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    $.fn.resizable = function(params) {\r\n        this.each(function(el){\r\n            resizable(this,params);\r\n        });\r\n    };\r\n\r\n    function resizer(){\r\n      return resizer;\r\n    }\r\n\r\n    langx.mixin(resizer, {\r\n        resizable: resizable\r\n    });\r\n\r\n    return interact.resizer = resizer;\r\n});\r\n\ndefine('skylark-utils-interact/selector',[\r\n    \"./interact\",\r\n    \"skylark-utils/langx\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/eventer\",\r\n    \"./mover\",\r\n    \"skylark-utils/styler\",\r\n    \"skylark-utils/query\"\r\n],function(interact, langx,noder,datax,geom,eventer,mover,styler,$){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    var options = {\r\n        // Function which returns custom X and Y coordinates of the mouse\r\n            mousePosFetcher: null,\r\n            // Indicates custom target updating strategy\r\n            updateTarget: null,\r\n            // Function which gets HTMLElement as an arg and returns it relative position\r\n            ratioDefault: 0,\r\n            posFetcher: null,\r\n\r\n            started: null,\r\n            moving: null,\r\n            ended: null,\r\n\r\n            // Resize unit step\r\n            step: 1,\r\n\r\n            // Minimum dimension\r\n            minDim: 32,\r\n\r\n            // Maximum dimension\r\n            maxDim: '',\r\n\r\n            // Unit used for height resizing\r\n            unitHeight: 'px',\r\n\r\n            // Unit used for width resizing\r\n            unitWidth: 'px',\r\n\r\n            // The key used for height resizing\r\n            keyHeight: 'height',\r\n\r\n            // The key used for width resizing\r\n            keyWidth: 'width',\r\n\r\n            // If true, will override unitHeight and unitWidth, on start, with units\r\n            // from the current focused element (currently used only in SelectComponent)\r\n            currentUnit: 1,\r\n\r\n            // Handlers\r\n            direction : {\r\n                tl: 1, // Top left\r\n                tc: 1, // Top center\r\n                tr: 1, // Top right\r\n                cl: 1, // Center left\r\n                cr: 1, // Center right\r\n                bl: 1, // Bottom left\r\n                bc: 1, // Bottom center\r\n                br: 1 // Bottom right,\r\n            },\r\n            handler : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        } ,\r\n\r\n\r\n        currentPos,\r\n        startRect,\r\n        currentRect,\r\n        delta;\r\n\r\n    var classPrefix = \"\",\r\n        container,\r\n        handlers,\r\n        target,\r\n        direction ={\r\n            left : true,\r\n            right : true,\r\n            top : true,\r\n            bottom : true\r\n        },\r\n        startSize,\r\n        currentSize,\r\n\r\n        startedCallback,\r\n        resizingCallback,\r\n        stoppedCallback;\r\n\r\n\r\n\r\n    function init (options) {\r\n        options = options || {};\r\n        classPrefix = options.classPrefix || \"\";\r\n\r\n        var appendTo = options.appendTo || document.body;\r\n        container = noder.createElement('div',{\r\n            \"class\" : classPrefix + 'resizer-c'\r\n        });\r\n        noder.append(appendTo,container);\r\n\r\n\r\n        // Create handlers\r\n        handlers = {};\r\n        ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function(n) {\r\n            return handlers[n] = noder.createElement(\"i\",{\r\n                    \"class\" : classPrefix + 'resizer-h ' + classPrefix + 'resizer-h-' + n,\r\n                    \"data-resize-handler\" : n\r\n                });\r\n        });\r\n\r\n        for (var n in handlers) {\r\n            var handler = handlers[n];\r\n            noder.append(container,handler);\r\n            mover.movable(handler,{\r\n                auto : false,\r\n                started : started,\r\n                moving : resizing,\r\n                stopped : stopped\r\n            })\r\n        }\r\n    }\r\n\r\n    function started(e) {\r\n        var handler = e.target;\r\n        startSize = geom.size(target);\r\n        if (startedCallback) {\r\n            startedCallback(e);\r\n        }\r\n    }\r\n\r\n    function resizing(e) {\r\n        currentSize = {};\r\n\r\n        if (direction.left || direction.right) {\r\n            currentSize.width = startSize.width + e.deltaX;\r\n        } else {\r\n            currentSize.width = startSize.width;\r\n        }\r\n\r\n        if (direction.top || direction.bottom) {\r\n            currentSize.height = startSize.height + e.deltaY;\r\n        } else {\r\n            currentSize.height = startSize.height;\r\n        }\r\n\r\n        geom.size(target,currentSize);\r\n        geom.pageRect(container,geom.pageRect(target));\r\n\r\n        if (resizingCallback) {\r\n            resizingCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function stopped(e) {\r\n        if (stoppedCallback) {\r\n            stoppedCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function select(el,options) {\r\n        // Avoid focusing on already focused element\r\n        if (el && el === target) {\r\n          return;\r\n        } \r\n\r\n        target = el; \r\n        startDim = rectDim = startPos = null;\r\n\r\n        geom.pageRect(container,geom.pageRect(target));\r\n        styler.show(container);\r\n\r\n    }\r\n\r\n\r\n    function unselect(e) {\r\n        if (container) {\r\n            styler.hide(container);\r\n        }\r\n        target = null;\r\n    }\r\n\r\n    function isHandler(el) {\r\n        if (handlers) {\r\n            for (var n in handlers) {\r\n              if (handlers[n] === el) return true;\r\n            }                \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function docs(el) {\r\n        return [noder.ownerDoc(el), noder.doc()];\r\n    }\r\n\r\n    function selector(){\r\n      return selector;\r\n    }\r\n\r\n    langx.mixin(selector, {\r\n        init : init,\r\n\r\n        select : select,\r\n\r\n        unselect : unselect\r\n\r\n    });\r\n\r\n    return interact.selector = selector;\r\n});\r\n\ndefine('skylark-utils-interact/sorter',[\r\n    \"./interact\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/eventer\",\r\n    \"skylark-utils/styler\",\r\n    \"skylark-utils/dnd\",\r\n    \"skylark-utils/query\",\r\n    \"skylark-utils/widgets\",\r\n    \"./mover\",\r\n    \"./resizer\"\r\n],function(interact, langx,noder,datax,geom,eventer,styler,dnd,$,widgets,mover,resizer){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = widgets.Widget.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    /*\r\n     * @param {HTMLElement} container  the element to use as a sortable container\r\n     * @param {Object} options  options object\r\n     * @param {String} [options.items = \"\"] \r\n     * @param {Object} [options.connectWith =] the selector to create connected lists\r\n     * @param {Object} [options\r\n     * @param {Object} [options\r\n     */\r\n    function sortable(container,options) {\r\n        options = langx.mixin({\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n\r\n        },options);\r\n\r\n        var isHandle, index, \r\n            $container = $(container), \r\n            $items = $container.children(options.items);\r\n        var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n            \"class\" : options.placeholderClass\r\n        }));\r\n\r\n        dnd.draggable(container,{\r\n            source : options.items,\r\n            handle : options.handle,\r\n            draggingClass : options.draggingClass,\r\n            preparing : function(e) {\r\n                //e.dragSource = e.handleElm;\r\n            },\r\n            started :function(e) {\r\n                e.ghost = e.dragSource;\r\n                e.transfer = {\r\n                    \"text\": \"dummy\"\r\n                };\r\n                index = (dragging = $(e.dragSource)).index();\r\n            },\r\n            ended : function(e) {\r\n                if (!dragging) {\r\n                    return;\r\n                }\r\n                dragging.show();\r\n                placeholders.detach();\r\n                if (index != dragging.index()) {\r\n                    dragging.parent().trigger('sortupdate', {item: dragging});\r\n                }\r\n                dragging = null;                \r\n            }\r\n\r\n        });\r\n\r\n        \r\n        dnd.droppable(container,{\r\n            started: function(e) {\r\n                e.acceptable = true;\r\n                e.activeClass = \"active\";\r\n                e.hoverClass = \"over\";\r\n            },\r\n            overing : function(e) {\r\n                if ($items.is(e.overElm)) {\r\n                    if (options.forcePlaceholderSize) {\r\n                        placeholder.height(dragging.outerHeight());\r\n                    }\r\n                    dragging.hide();\r\n                    $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                    placeholders.not(placeholder).detach();\r\n                } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                    placeholders.detach();\r\n                    $(e.overElm).append(placeholder);\r\n                }                \r\n            },\r\n            dropped : function(e) {\r\n                placeholders.filter(':visible').after(dragging);\r\n                dragging.show();\r\n                placeholders.detach();\r\n\r\n                dragging = null;                \r\n              }\r\n        });\r\n\r\n        $container.data('items', options.items)\r\n        placeholders = placeholders.add(placeholder);\r\n        if (options.connectWith) {\r\n            $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n        }\r\n        \r\n        return {\r\n            remove : function() {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    $.fn.sortable = function(options) {\r\n        options = langx.mixin({\r\n            connectWith: false\r\n        }, options);\r\n        return this.each(function() {\r\n            sortable(this,options);\r\n        });\r\n    };\r\n\r\n    function sorter(){\r\n      return sorter;\r\n    }\r\n\r\n    langx.mixin(sorter, {\r\n\r\n        sortable : sortable\r\n\r\n    });\r\n\r\n    return interact.sorter = sorter;\r\n});\r\n\ndefine('skylark-utils-interact/main',[\r\n    \"skylark-utils/skylark\",\r\n    \"./mover\",\r\n    \"./resizer\",\r\n    \"./selector\",\r\n    \"./sorter\"\r\n], function(skylark) {\r\n    return skylark;\r\n})\r\n;\ndefine('skylark-utils-interact', ['skylark-utils-interact/main'], function (main) { return main; });\n\n"]}