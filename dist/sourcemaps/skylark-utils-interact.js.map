{"version":3,"sources":["skylark-utils-interact.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","skylarkjs","skylark","langx","interact","noder","datax","finder","geom","eventer","styler","DndManager","on","off","attr","removeAttr","pagePosition","addClass","height","Evented","inherit","klassName","init","prepare","draggable","e","create","dragSource","dragHandle","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","elm","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","removeClass","manager","plugins","Draggable","Plugin","pluginName","options","_construct","overrided","self","eventName","isFunction","mousedown","handle","closest","target","source","_elm","mouseup","dragstart","dragend","stop","register","Droppable","hoverClass","activeClass","acceptable","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","Movable","Array","prototype","some","updateWithTouchData","keys","changedTouches","overlayDiv","downButton","startX","startY","originalPos","size","handleEl","auto","constraints","doc","document","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","cursor","docSize","getDocumentSize","button","screenX","screenY","relativePosition","css","createElement","position","width","zIndex","opacity","append","body","move","deltaX","deltaY","l","t","minX","maxX","minY","maxY","remove","_handleEl","$","Resizable","touchActionNone","direction","right","bottom","border","grabber","selector","startSize","currentSize","isString","find","isHtmlNode","classPrefix","appendTo","container","class","handlers","n","data-resize-handler","handler","resizing","pageRect","resizingCallback","select","el","startDim","rectDim","startPos","show","unselect","hide","mixin","Selectable","placeholders","enable","disable","destory","Sortable","connectWith","placeholder","placeholderClass","items","index","$container","$items","children","test","tagName","preparing","text","ended","detach","parent","item","overing","is","forcePlaceholderSize","outerHeight","not","filter","after","data","add","main"],"mappings":"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","file":"../skylark-utils-interact.js","sourcesContent":["define('skylark-utils-interact/interact',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar interact = skylark.interact = {\r\n\t};\r\n\r\n\treturn interact;\r\n});\r\n\r\n\ndefine('skylark-utils-interact/ddmanager',[\r\n    \"./interact\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\"\r\n], function(interact, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = interact.DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager();\r\n\r\n\r\n    return manager;\r\n});\ndefine('skylark-utils-interact/Draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./interact\",\r\n    \"./ddmanager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, interact,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return interact.Draggable = Draggable;\r\n});\ndefine('skylark-utils-interact/Droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./interact\",\r\n    \"./ddmanager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, interact,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return interact.Droppable = Droppable;\r\n});\ndefine('skylark-utils-interact/Movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            options = this.options;\r\n            var handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                drag,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                size,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n\r\n                    e.preventDefault();\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"curosr\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-utils-interact/Resizable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/query\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,finder,geom,eventer,styler,$,plugins,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    var Resizable = plugins.Plugin.inherit({\r\n        klassName: \"Resizable\",\r\n\r\n        \"pluginName\" : \"lark.resizable\",\r\n        \r\n        options : {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n\r\n            direction : {\r\n                top: false, \r\n                left: false, \r\n                right: true, \r\n                bottom: true\r\n            },\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        },\r\n\r\n        _construct :function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n            options = this.options;\r\n            var handle = options.handle || {},\r\n                handleEl,\r\n                direction = options.direction,\r\n                startSize,\r\n                currentSize,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped;\r\n\r\n            if (langx.isString(handle)) {\r\n                handleEl = finder.find(elm,handle);\r\n            } else if (langx.isHtmlNode(handle)) {\r\n                handleEl = handle;\r\n            }\r\n            Movable(handleEl,{\r\n                auto : false,\r\n                started : function(e) {\r\n                    startSize = geom.size(elm);\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n                moving : function(e) {\r\n                    currentSize = {\r\n                    };\r\n                    if (direction.left || direction.right) {\r\n                        currentSize.width = startSize.width + e.deltaX;\r\n                    } else {\r\n                        currentSize.width = startSize.width;\r\n                    }\r\n\r\n                    if (direction.top || direction.bottom) {\r\n                        currentSize.height = startSize.height + e.deltaY;\r\n                    } else {\r\n                        currentSize.height = startSize.height;\r\n                    }\r\n\r\n                    geom.size(elm,currentSize);\r\n\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n                stopped: function(e) {\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }                \r\n                }\r\n            });\r\n            \r\n            this._handleEl = handleEl;\r\n        },\r\n\r\n        // destroys the dragger.\r\n        remove: function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Resizable,\"resizable\");\r\n\r\n    return interact.Resizable = Resizable;\r\n});\r\n\ndefine('skylark-utils-interact/Selectable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/query\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,geom,eventer,styler,$,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    var options = {\r\n        // Function which returns custom X and Y coordinates of the mouse\r\n            mousePosFetcher: null,\r\n            // Indicates custom target updating strategy\r\n            updateTarget: null,\r\n            // Function which gets HTMLElement as an arg and returns it relative position\r\n            ratioDefault: 0,\r\n            posFetcher: null,\r\n\r\n            started: null,\r\n            moving: null,\r\n            ended: null,\r\n\r\n            // Resize unit step\r\n            step: 1,\r\n\r\n            // Minimum dimension\r\n            minDim: 32,\r\n\r\n            // Maximum dimension\r\n            maxDim: '',\r\n\r\n            // Unit used for height resizing\r\n            unitHeight: 'px',\r\n\r\n            // Unit used for width resizing\r\n            unitWidth: 'px',\r\n\r\n            // The key used for height resizing\r\n            keyHeight: 'height',\r\n\r\n            // The key used for width resizing\r\n            keyWidth: 'width',\r\n\r\n            // If true, will override unitHeight and unitWidth, on start, with units\r\n            // from the current focused element (currently used only in SelectComponent)\r\n            currentUnit: 1,\r\n\r\n            // Handlers\r\n            direction : {\r\n                tl: 1, // Top left\r\n                tc: 1, // Top center\r\n                tr: 1, // Top right\r\n                cl: 1, // Center left\r\n                cr: 1, // Center right\r\n                bl: 1, // Bottom left\r\n                bc: 1, // Bottom center\r\n                br: 1 // Bottom right,\r\n            },\r\n            handler : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        } ,\r\n\r\n\r\n        currentPos,\r\n        startRect,\r\n        currentRect,\r\n        delta;\r\n\r\n    var classPrefix = \"\",\r\n        container,\r\n        handlers,\r\n        target,\r\n        direction ={\r\n            left : true,\r\n            right : true,\r\n            top : true,\r\n            bottom : true\r\n        },\r\n        startSize,\r\n        currentSize,\r\n\r\n        startedCallback,\r\n        resizingCallback,\r\n        stoppedCallback;\r\n\r\n    function init (options) {\r\n        options = options || {};\r\n        classPrefix = options.classPrefix || \"\";\r\n\r\n        var appendTo = options.appendTo || document.body;\r\n        container = noder.createElement('div',{\r\n            \"class\" : classPrefix + 'resizer-c'\r\n        });\r\n        noder.append(appendTo,container);\r\n\r\n\r\n        // Create handlers\r\n        handlers = {};\r\n        ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function(n) {\r\n            return handlers[n] = noder.createElement(\"i\",{\r\n                    \"class\" : classPrefix + 'resizer-h ' + classPrefix + 'resizer-h-' + n,\r\n                    \"data-resize-handler\" : n\r\n                });\r\n        });\r\n\r\n        for (var n in handlers) {\r\n            var handler = handlers[n];\r\n            noder.append(container,handler);\r\n            Movable(handler,{\r\n                auto : false,\r\n                started : started,\r\n                moving : resizing,\r\n                stopped : stopped\r\n            })\r\n        }\r\n    }\r\n\r\n    function started(e) {\r\n        var handler = e.target;\r\n        startSize = geom.size(target);\r\n        if (startedCallback) {\r\n            startedCallback(e);\r\n        }\r\n    }\r\n\r\n    function resizing(e) {\r\n        currentSize = {};\r\n\r\n        if (direction.left || direction.right) {\r\n            currentSize.width = startSize.width + e.deltaX;\r\n        } else {\r\n            currentSize.width = startSize.width;\r\n        }\r\n\r\n        if (direction.top || direction.bottom) {\r\n            currentSize.height = startSize.height + e.deltaY;\r\n        } else {\r\n            currentSize.height = startSize.height;\r\n        }\r\n\r\n        geom.size(target,currentSize);\r\n        geom.pageRect(container,geom.pageRect(target));\r\n\r\n        if (resizingCallback) {\r\n            resizingCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function stopped(e) {\r\n        if (stoppedCallback) {\r\n            stoppedCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function select(el,options) {\r\n        // Avoid focusing on already focused element\r\n        if (el && el === target) {\r\n          return;\r\n        } \r\n\r\n        target = el; \r\n        startDim = rectDim = startPos = null;\r\n\r\n        geom.pageRect(container,geom.pageRect(target));\r\n        styler.show(container);\r\n\r\n    }\r\n\r\n\r\n    function unselect(e) {\r\n        if (container) {\r\n            styler.hide(container);\r\n        }\r\n        target = null;\r\n    }\r\n\r\n    function isHandler(el) {\r\n        if (handlers) {\r\n            for (var n in handlers) {\r\n              if (handlers[n] === el) return true;\r\n            }                \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function docs(el) {\r\n        return [noder.ownerDoc(el), noder.doc()];\r\n    }\r\n\r\n    function selector(){\r\n      return selector;\r\n    }\r\n\r\n    langx.mixin(selector, {\r\n        init : init,\r\n\r\n        select : select,\r\n\r\n        unselect : unselect\r\n\r\n    });\r\n\r\n    return interact.Selectable = selector;\r\n});\r\n\ndefine('skylark-utils-interact/Sortable',[\r\n    \"./interact\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/query\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./Draggable\",\r\n    \"./Droppable\",\r\n    \"./Movable\",\r\n    \"./Resizable\"\r\n],function(interact, langx,noder,datax,geom,eventer,styler,$,plugins,Draggable,Droppable, Movable,Resizable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = plugins.Plugin.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    var Sortable = plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n\r\n        pluginName : \"lark.sortable\",\r\n        \r\n        options : {\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n        },\r\n\r\n        /*\r\n         * @param {HTMLElement} container  the element to use as a sortable container\r\n         * @param {Object} options  options object\r\n         * @param {String} [options.items = \"\"] \r\n         * @param {Object} [options.connectWith =] the selector to create connected lists\r\n         * @param {Object} [options\r\n         * @param {Object} [options\r\n         */\r\n        _construct : function (container,options) {\r\n            this.overrided(container,options);\r\n\r\n            options = this.options;\r\n\r\n            var isHandle, index, \r\n                $container = $(container), \r\n                $items = $container.children(options.items);\r\n            var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n                \"class\" : options.placeholderClass\r\n            }));\r\n\r\n            Draggable(container,{\r\n                source : options.items,\r\n                handle : options.handle,\r\n                draggingClass : options.draggingClass,\r\n                preparing : function(e) {\r\n                    //e.dragSource = e.handleElm;\r\n                },\r\n                started :function(e) {\r\n                    e.ghost = e.dragSource;\r\n                    e.transfer = {\r\n                        \"text\": \"dummy\"\r\n                    };\r\n                    index = (dragging = $(e.dragSource)).index();\r\n                },\r\n                ended : function(e) {\r\n                    if (!dragging) {\r\n                        return;\r\n                    }\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n                    if (index != dragging.index()) {\r\n                        dragging.parent().trigger('sortupdate', {item: dragging});\r\n                    }\r\n                    dragging = null;                \r\n                }\r\n\r\n            });\r\n\r\n            \r\n            Droppable(container,{\r\n                started: function(e) {\r\n                    e.acceptable = true;\r\n                    e.activeClass = \"active\";\r\n                    e.hoverClass = \"over\";\r\n                },\r\n                overing : function(e) {\r\n                    if ($items.is(e.overElm)) {\r\n                        if (options.forcePlaceholderSize) {\r\n                            placeholder.height(dragging.outerHeight());\r\n                        }\r\n                        dragging.hide();\r\n                        $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                        placeholders.not(placeholder).detach();\r\n                    } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                        placeholders.detach();\r\n                        $(e.overElm).append(placeholder);\r\n                    }                \r\n                },\r\n                dropped : function(e) {\r\n                    placeholders.filter(':visible').after(dragging);\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n\r\n                    dragging = null;                \r\n                  }\r\n            });\r\n\r\n            $container.data('items', options.items)\r\n            placeholders = placeholders.add(placeholder);\r\n            if (options.connectWith) {\r\n                $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    plugins.register(Sortable,\"sortable\");\r\n\r\n    return interact.Sortable = Sortable;\r\n});\r\n\ndefine('skylark-utils-interact/main',[\r\n    \"./interact\",\r\n    \"./Draggable\",\r\n    \"./Droppable\",\r\n    \"./Movable\",\r\n    \"./Resizable\",\r\n    \"./Selectable\",\r\n    \"./Sortable\"\r\n], function(interact) {\r\n    return interact;\r\n})\r\n;\ndefine('skylark-utils-interact', ['skylark-utils-interact/main'], function (main) { return main; });\n\n"]}