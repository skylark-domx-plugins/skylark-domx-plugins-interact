{"version":3,"sources":["skylark-domx-plugins-interact.js"],"names":["define","langx","noder","datax","geom","eventer","styler","plugins","interact","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","applyTranform","obj","tX","tY","style","transform","Rotatable","Plugin","inherit","klassName","pluginName","_construct","elm","options","call","this","overlayDiv","prevX","prevY","timer","handleEl","handle","doc","document","startingCallback","starting","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","deltaX","deltaY","move","e","clientX","clientY","preventDefault","stop","setInterval","Math","abs","clearInterval","remove","pointerType","button","cursor","docSize","getDocumentSize","ret","isPlainObject","css","createElement","position","top","left","width","zIndex","opacity","append","body","_handleEl","register","Mouser","Movable","updateWithMoveData","movable","self","moveEl","originalPos","auto","constraints","_mouser","relativePosition","size","l","t","minX","maxX","minY","maxY","destroy","$","container","handlers","target","startSize","currentSize","resizingCallback","classPrefix","direction","right","bottom","resizing","pageRect","selector","mixin","init","appendTo","n","class","forEach","data-resize-handler","handler","select","el","startDim","rectDim","startPos","show","unselect","hide","Selectable","elms","radius","$elm","originalTransform","data","Scalable","targets","d","wheelDelta","detail","main"],"mappings":"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","file":"../skylark-domx-plugins-interact.js","sourcesContent":["define('skylark-domx-plugins-interact/rotatable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    function applyTranform(obj,tX,tY) {\r\n        // Constrain the angle of camera (between 0 and 180)\r\n        if (tY > 180) tY = 180;\r\n        if (tY < 0) tY = 0;\r\n\r\n        // Apply the angle\r\n        obj.style.transform = \"rotateX(\" + -tY + \"deg) rotateY(\" + tX + \"deg)\";\r\n    }\r\n\r\n\r\n    var Rotatable = plugins.Plugin.inherit({\r\n        klassName: \"Rotatable\",\r\n\r\n        pluginName : \"lark.interact.rotatable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                prevX,\r\n                prevY,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                tX = 0,\r\n                tY = 10,\r\n                deltaX = 0,\r\n                deltaY = 0,\r\n\r\n                timer,\r\n\r\n                start = function(e) {\r\n                    if (e.pointerType==\"mouse\" &&  e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n                    \r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n\r\n                    //handleEl = getHandleEl();\r\n                    prevX = e.clientX;\r\n                    prevY = e.clientY;\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"cursor\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    clearInterval(timer);\r\n\r\n                    eventer.on(doc, \"pointermove\", move).on(doc, \"pointerup\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n\r\n\r\n                    deltaX = e.deltaX = e.clientX - prevX;\r\n                    deltaY = e.deltaY = e.clientY - prevY;\r\n\r\n                    prevX = e.clientX;\r\n                    prevY = e.clientY;\r\n\r\n\r\n                    tX += deltaX * 0.1;\r\n                    tY += deltaY * 0.1;\r\n                    applyTranform(elm,tX,tY);\r\n\r\n                    e.preventDefault();\r\n\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) { \r\n                    eventer.off(doc, \"pointermove\", move).off(doc, \"pointerup\", stop);\r\n\r\n                    let deta\r\n\r\n                    timer = setInterval(function() {\r\n                        deltaX *= 0.95;\r\n                        deltaY *= 0.95;\r\n                        tX += deltaX * 0.1;\r\n                        tY += deltaX * 0.1;\r\n                        applyTranform(elm,tX,tY);\r\n\r\n                        ///playSpin(false);\r\n                        if (Math.abs(deltaX) < 0.5 && Math.abs(deltaY) < 0.5) {\r\n                          clearInterval(timer);\r\n                          //playSpin(true);\r\n                        }\r\n                    }, 17);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"pointerdown\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Rotatable,\"rotatable\");\r\n\r\n    return interact.Rotatable = Rotatable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/Movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\",\r\n    \"./mouser\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact,Mouser){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.interact.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            /*\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n            */\r\n\r\n            function updateWithMoveData(e) {\r\n                e.movable = self;\r\n                e.moveEl = elm;\r\n                e.handleEl = handleEl;\r\n            }\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                originalPos,\r\n                drag,\r\n                size,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    ///updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.constraints) {\r\n                                constraints = ret.constraints;\r\n                            }\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n \r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"cursor\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    ////eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    ///updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                   if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    ///updateWithTouchData(e);\r\n\r\n                    ///eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            ///eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n            this._mouser = new Mouser(this._handleEl,{\r\n                started : start,\r\n                moving : move,\r\n                stopped : stop\r\n            })\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            this._mouser.destroy();\r\n            this._mouser = null;\r\n            ///eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/selectable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,geom,eventer,styler,$,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    var options = {\r\n        // Function which returns custom X and Y coordinates of the mouse\r\n            mousePosFetcher: null,\r\n            // Indicates custom target updating strategy\r\n            updateTarget: null,\r\n            // Function which gets HTMLElement as an arg and returns it relative position\r\n            ratioDefault: 0,\r\n            posFetcher: null,\r\n\r\n            started: null,\r\n            moving: null,\r\n            ended: null,\r\n\r\n            // Resize unit step\r\n            step: 1,\r\n\r\n            // Minimum dimension\r\n            minDim: 32,\r\n\r\n            // Maximum dimension\r\n            maxDim: '',\r\n\r\n            // Unit used for height resizing\r\n            unitHeight: 'px',\r\n\r\n            // Unit used for width resizing\r\n            unitWidth: 'px',\r\n\r\n            // The key used for height resizing\r\n            keyHeight: 'height',\r\n\r\n            // The key used for width resizing\r\n            keyWidth: 'width',\r\n\r\n            // If true, will override unitHeight and unitWidth, on start, with units\r\n            // from the current focused element (currently used only in SelectComponent)\r\n            currentUnit: 1,\r\n\r\n            // Handlers\r\n            direction : {\r\n                tl: 1, // Top left\r\n                tc: 1, // Top center\r\n                tr: 1, // Top right\r\n                cl: 1, // Center left\r\n                cr: 1, // Center right\r\n                bl: 1, // Bottom left\r\n                bc: 1, // Bottom center\r\n                br: 1 // Bottom right,\r\n            },\r\n            handler : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        } ,\r\n\r\n\r\n        currentPos,\r\n        startRect,\r\n        currentRect,\r\n        delta;\r\n\r\n    var classPrefix = \"\",\r\n        container,\r\n        handlers,\r\n        target,\r\n        direction ={\r\n            left : true,\r\n            right : true,\r\n            top : true,\r\n            bottom : true\r\n        },\r\n        startSize,\r\n        currentSize,\r\n\r\n        startedCallback,\r\n        resizingCallback,\r\n        stoppedCallback;\r\n\r\n    function init (options) {\r\n        options = options || {};\r\n        classPrefix = options.classPrefix || \"\";\r\n\r\n        var appendTo = options.appendTo || document.body;\r\n        container = noder.createElement('div',{},{\r\n            \"class\" : classPrefix + 'resizer-c'\r\n        });\r\n        noder.append(appendTo,container);\r\n\r\n\r\n        // Create handlers\r\n        handlers = {};\r\n        ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function(n) {\r\n            return handlers[n] = noder.createElement(\"i\",{},{\r\n                    \"class\" : classPrefix + 'resizer-h ' + classPrefix + 'resizer-h-' + n,\r\n                    \"data-resize-handler\" : n\r\n                });\r\n        });\r\n\r\n        for (var n in handlers) {\r\n            var handler = handlers[n];\r\n            noder.append(container,handler);\r\n            Movable(handler,{\r\n                auto : false,\r\n                started : started,\r\n                moving : resizing,\r\n                stopped : stopped\r\n            })\r\n        }\r\n    }\r\n\r\n    function started(e) {\r\n        var handler = e.target;\r\n        startSize = geom.size(target);\r\n        if (startedCallback) {\r\n            startedCallback(e);\r\n        }\r\n    }\r\n\r\n    function resizing(e) {\r\n        currentSize = {};\r\n\r\n        if (direction.left || direction.right) {\r\n            currentSize.width = startSize.width + e.deltaX;\r\n        } else {\r\n            currentSize.width = startSize.width;\r\n        }\r\n\r\n        if (direction.top || direction.bottom) {\r\n            currentSize.height = startSize.height + e.deltaY;\r\n        } else {\r\n            currentSize.height = startSize.height;\r\n        }\r\n\r\n        geom.size(target,currentSize);\r\n        geom.pageRect(container,geom.pageRect(target));\r\n\r\n        if (resizingCallback) {\r\n            resizingCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function stopped(e) {\r\n        if (stoppedCallback) {\r\n            stoppedCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function select(el,options) {\r\n        // Avoid focusing on already focused element\r\n        if (el && el === target) {\r\n          return;\r\n        } \r\n\r\n        target = el; \r\n        startDim = rectDim = startPos = null;\r\n\r\n        geom.pageRect(container,geom.pageRect(target));\r\n        styler.show(container);\r\n\r\n    }\r\n\r\n\r\n    function unselect(e) {\r\n        if (container) {\r\n            styler.hide(container);\r\n        }\r\n        target = null;\r\n    }\r\n\r\n    function isHandler(el) {\r\n        if (handlers) {\r\n            for (var n in handlers) {\r\n              if (handlers[n] === el) return true;\r\n            }                \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function docs(el) {\r\n        return [noder.ownerDoc(el), noder.doc()];\r\n    }\r\n\r\n    function selector(){\r\n      return selector;\r\n    }\r\n\r\n    langx.mixin(selector, {\r\n        init : init,\r\n\r\n        select : select,\r\n\r\n        unselect : unselect\r\n\r\n    });\r\n\r\n    return interact.Selectable = selector;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/scalable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,$,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    function applyTranform(elms,radius) {\r\n        // Apply the angle\r\n        $(elms).forEach(function(elm){\r\n            let $elm = $(elm);\r\n            var originalTransform = $elm.data(\"originalTransform\");\r\n            if (!originalTransform) {\r\n                originalTransform = $elm.css(\"transform\");\r\n                $elm.data(\"originalTransform\",originalTransform);\r\n            }\r\n            $elm.css(\"transform\",originalTransform +\" translateZ(\" +  radius +\"px\");\r\n        });\r\n    }\r\n\r\n\r\n    var Scalable = plugins.Plugin.inherit({\r\n        klassName: \"Scalable\",\r\n\r\n        pluginName : \"lark.interact.scalable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            let radius = this.options.radius || 0,\r\n                targets = this.options.targets || elm;\r\n\r\n            eventer.on(elm,\"mousewheel\", function(e) {\r\n                var d = e.wheelDelta / 20 || -e.detail;\r\n                radius += d;\r\n                applyTranform(targets,radius);\r\n            });\r\n\r\n            applyTranform(targets,radius);\r\n        }\r\n    });\r\n\r\n    plugins.register(Scalable,\"scalable\");\r\n\r\n    return interact.Scalable = Scalable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/main',[\r\n    \"./interact\",\r\n    \"./mouser\",\r\n    \"./movable\",\r\n    \"./resizable\",\r\n    \"./rotatable\",\r\n    \"./rotatable\",\r\n    \"./selectable\",\r\n    \"./scalable\"\r\n], function(interact) {\r\n    return interact;\r\n})\r\n;\ndefine('skylark-domx-plugins-interact', ['skylark-domx-plugins-interact/main'], function (main) { return main; });\n\n"]}