{"version":3,"sources":["skylark-domx-plugins-interact.js"],"names":["define","skylark","attach","langx","noder","datax","geom","eventer","styler","plugins","interact","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","Movable","Plugin","inherit","klassName","pluginName","_construct","elm","options","updateWithTouchData","e","keys","i","changedTouches","split","length","this","overrided","overlayDiv","startX","startY","originalPos","handleEl","handle","auto","constraints","doc","document","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","move","button","stop","deltaX","screenX","deltaY","screenY","l","left","t","top","minX","maxX","minY","maxY","relativePosition","preventDefault","remove","cursor","docSize","getDocumentSize","size","css","createElement","position","width","zIndex","opacity","append","body","_handleEl","register","finder","$","Resizable","touchActionNone","direction","right","bottom","border","grabber","selector","startSize","currentSize","isString","find","isHtmlNode","container","handlers","target","resizingCallback","classPrefix","resizing","pageRect","mixin","init","appendTo","n","class","forEach","data-resize-handler","handler","select","el","startDim","rectDim","startPos","show","unselect","hide","Selectable","main"],"mappings":"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","file":"../skylark-domx-plugins-interact.js","sourcesContent":["define('skylark-domx-plugins-interact/polyfill',[],function(){\r\n\r\n});\ndefine('skylark-domx-plugins-interact/interact',[\r\n    \"skylark-langx/skylark\",\r\n    \"./polyfill\"\r\n], function(skylark) {\r\n\r\n\treturn skylark.attach(\"domx.interact\",{});\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-interact/Movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            options = this.options;\r\n            var handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                drag,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                size,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n\r\n                    e.preventDefault();\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"curosr\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/Resizable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,finder,geom,eventer,styler,$,plugins,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    var Resizable = plugins.Plugin.inherit({\r\n        klassName: \"Resizable\",\r\n\r\n        \"pluginName\" : \"lark.resizable\",\r\n        \r\n        options : {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n\r\n            direction : {\r\n                top: false, \r\n                left: false, \r\n                right: true, \r\n                bottom: true\r\n            },\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        },\r\n\r\n        _construct :function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n            options = this.options;\r\n            var handle = options.handle || {},\r\n                handleEl,\r\n                direction = options.direction,\r\n                startSize,\r\n                currentSize,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped;\r\n\r\n            if (langx.isString(handle)) {\r\n                handleEl = finder.find(elm,handle);\r\n            } else if (langx.isHtmlNode(handle)) {\r\n                handleEl = handle;\r\n            }\r\n            Movable(handleEl,{\r\n                auto : false,\r\n                started : function(e) {\r\n                    startSize = geom.size(elm);\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n                moving : function(e) {\r\n                    currentSize = {\r\n                    };\r\n                    if (direction.left || direction.right) {\r\n                        currentSize.width = startSize.width + e.deltaX;\r\n                    } else {\r\n                        currentSize.width = startSize.width;\r\n                    }\r\n\r\n                    if (direction.top || direction.bottom) {\r\n                        currentSize.height = startSize.height + e.deltaY;\r\n                    } else {\r\n                        currentSize.height = startSize.height;\r\n                    }\r\n\r\n                    geom.size(elm,currentSize);\r\n\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n                stopped: function(e) {\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }                \r\n                }\r\n            });\r\n            \r\n            this._handleEl = handleEl;\r\n        },\r\n\r\n        // destroys the dragger.\r\n        remove: function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Resizable,\"resizable\");\r\n\r\n    return interact.Resizable = Resizable;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/Selectable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,geom,eventer,styler,$,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    var options = {\r\n        // Function which returns custom X and Y coordinates of the mouse\r\n            mousePosFetcher: null,\r\n            // Indicates custom target updating strategy\r\n            updateTarget: null,\r\n            // Function which gets HTMLElement as an arg and returns it relative position\r\n            ratioDefault: 0,\r\n            posFetcher: null,\r\n\r\n            started: null,\r\n            moving: null,\r\n            ended: null,\r\n\r\n            // Resize unit step\r\n            step: 1,\r\n\r\n            // Minimum dimension\r\n            minDim: 32,\r\n\r\n            // Maximum dimension\r\n            maxDim: '',\r\n\r\n            // Unit used for height resizing\r\n            unitHeight: 'px',\r\n\r\n            // Unit used for width resizing\r\n            unitWidth: 'px',\r\n\r\n            // The key used for height resizing\r\n            keyHeight: 'height',\r\n\r\n            // The key used for width resizing\r\n            keyWidth: 'width',\r\n\r\n            // If true, will override unitHeight and unitWidth, on start, with units\r\n            // from the current focused element (currently used only in SelectComponent)\r\n            currentUnit: 1,\r\n\r\n            // Handlers\r\n            direction : {\r\n                tl: 1, // Top left\r\n                tc: 1, // Top center\r\n                tr: 1, // Top right\r\n                cl: 1, // Center left\r\n                cr: 1, // Center right\r\n                bl: 1, // Bottom left\r\n                bc: 1, // Bottom center\r\n                br: 1 // Bottom right,\r\n            },\r\n            handler : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        } ,\r\n\r\n\r\n        currentPos,\r\n        startRect,\r\n        currentRect,\r\n        delta;\r\n\r\n    var classPrefix = \"\",\r\n        container,\r\n        handlers,\r\n        target,\r\n        direction ={\r\n            left : true,\r\n            right : true,\r\n            top : true,\r\n            bottom : true\r\n        },\r\n        startSize,\r\n        currentSize,\r\n\r\n        startedCallback,\r\n        resizingCallback,\r\n        stoppedCallback;\r\n\r\n    function init (options) {\r\n        options = options || {};\r\n        classPrefix = options.classPrefix || \"\";\r\n\r\n        var appendTo = options.appendTo || document.body;\r\n        container = noder.createElement('div',{\r\n            \"class\" : classPrefix + 'resizer-c'\r\n        });\r\n        noder.append(appendTo,container);\r\n\r\n\r\n        // Create handlers\r\n        handlers = {};\r\n        ['tl', 'tc', 'tr', 'cl', 'cr', 'bl', 'bc', 'br'].forEach(function(n) {\r\n            return handlers[n] = noder.createElement(\"i\",{\r\n                    \"class\" : classPrefix + 'resizer-h ' + classPrefix + 'resizer-h-' + n,\r\n                    \"data-resize-handler\" : n\r\n                });\r\n        });\r\n\r\n        for (var n in handlers) {\r\n            var handler = handlers[n];\r\n            noder.append(container,handler);\r\n            Movable(handler,{\r\n                auto : false,\r\n                started : started,\r\n                moving : resizing,\r\n                stopped : stopped\r\n            })\r\n        }\r\n    }\r\n\r\n    function started(e) {\r\n        var handler = e.target;\r\n        startSize = geom.size(target);\r\n        if (startedCallback) {\r\n            startedCallback(e);\r\n        }\r\n    }\r\n\r\n    function resizing(e) {\r\n        currentSize = {};\r\n\r\n        if (direction.left || direction.right) {\r\n            currentSize.width = startSize.width + e.deltaX;\r\n        } else {\r\n            currentSize.width = startSize.width;\r\n        }\r\n\r\n        if (direction.top || direction.bottom) {\r\n            currentSize.height = startSize.height + e.deltaY;\r\n        } else {\r\n            currentSize.height = startSize.height;\r\n        }\r\n\r\n        geom.size(target,currentSize);\r\n        geom.pageRect(container,geom.pageRect(target));\r\n\r\n        if (resizingCallback) {\r\n            resizingCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function stopped(e) {\r\n        if (stoppedCallback) {\r\n            stoppedCallback(e);\r\n        }\r\n\r\n    }\r\n\r\n    function select(el,options) {\r\n        // Avoid focusing on already focused element\r\n        if (el && el === target) {\r\n          return;\r\n        } \r\n\r\n        target = el; \r\n        startDim = rectDim = startPos = null;\r\n\r\n        geom.pageRect(container,geom.pageRect(target));\r\n        styler.show(container);\r\n\r\n    }\r\n\r\n\r\n    function unselect(e) {\r\n        if (container) {\r\n            styler.hide(container);\r\n        }\r\n        target = null;\r\n    }\r\n\r\n    function isHandler(el) {\r\n        if (handlers) {\r\n            for (var n in handlers) {\r\n              if (handlers[n] === el) return true;\r\n            }                \r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    function docs(el) {\r\n        return [noder.ownerDoc(el), noder.doc()];\r\n    }\r\n\r\n    function selector(){\r\n      return selector;\r\n    }\r\n\r\n    langx.mixin(selector, {\r\n        init : init,\r\n\r\n        select : select,\r\n\r\n        unselect : unselect\r\n\r\n    });\r\n\r\n    return interact.Selectable = selector;\r\n});\r\n\ndefine('skylark-domx-plugins-interact/main',[\r\n    \"./interact\",\r\n    \"./Movable\",\r\n    \"./Resizable\",\r\n    \"./Selectable\"\r\n], function(interact) {\r\n    return interact;\r\n})\r\n;\ndefine('skylark-domx-plugins-interact', ['skylark-domx-plugins-interact/main'], function (main) { return main; });\n\n"]}