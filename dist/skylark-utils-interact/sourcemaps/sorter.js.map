{"version":3,"sources":["sorter.js"],"names":["define","interact","langx","noder","datax","geom","eventer","styler","dnd","$","widgets","mover","resizer","sortable","container","options","mixin","connectWith","placeholder","placeholderClass","draggingClass","items","index","$container","$items","children","createElement","test","tagName","class","draggable","source","handle","preparing","e","started","ghost","dragSource","transfer","text","dragging","ended","show","placeholders","detach","parent","trigger","item","droppable","acceptable","activeClass","hoverClass","overing","is","overElm","forcePlaceholderSize","height","outerHeight","hide","not","length","append","dropped","filter","after","data","add","this","remove","sorter","on","off","attr","removeAttr","pagePosition","addClass","Array","prototype","some","map","Widget","inherit","klassName","enable","disable","destory","fn","each"],"mappings":";;;;;;;AAAAA,QACI,aACA,sBACA,sBACA,sBACA,qBACA,wBACA,uBACA,oBACA,sBACA,wBACA,UACA,aACF,SAASC,EAAUC,EAAMC,EAAMC,EAAMC,EAAKC,EAAQC,EAAOC,EAAIC,EAAEC,EAAQC,EAAMC,GAuC3E,QAASC,GAASC,EAAUC,GACxBA,EAAUb,EAAMc,OACZC,aAAa,EACbC,YAAa,KACbC,iBAAkB,uBAClBC,cAAe,oBACfC,MAAQ,MAEVN,EAEF,IAAcO,GACVC,EAAad,EAAEK,GACfU,EAASD,EAAWE,SAASV,EAAQM,OACrCH,EAAcT,EAAEM,EAAQG,aAAef,EAAMuB,cAAc,aAAaC,KAAKb,EAAUc,SAAW,KAAO,OACzGC,QAAUd,EAAQI,mBAkEtB,OA/DAX,GAAIsB,UAAUhB,GACViB,OAAShB,EAAQM,MACjBW,OAASjB,EAAQiB,OACjBZ,cAAgBL,EAAQK,cACxBa,UAAY,SAASC,KAGrBC,QAAS,SAASD,GACdA,EAAEE,MAAQF,EAAEG,WACZH,EAAEI,UACEC,KAAQ,SAEZjB,GAASkB,EAAW/B,EAAEyB,EAAEG,aAAaf,SAEzCmB,MAAQ,SAASP,GACRM,IAGLA,EAASE,OACTC,EAAaC,SACTtB,GAASkB,EAASlB,SAClBkB,EAASK,SAASC,QAAQ,cAAeC,KAAMP,IAEnDA,EAAW,SAMnBhC,EAAIwC,UAAUlC,GACVqB,QAAS,SAASD,GACdA,EAAEe,YAAa,EACff,EAAEgB,YAAc,SAChBhB,EAAEiB,WAAa,QAEnBC,QAAU,SAASlB,GACXV,EAAO6B,GAAGnB,EAAEoB,UACRvC,EAAQwC,sBACRrC,EAAYsC,OAAOhB,EAASiB,eAEhCjB,EAASkB,OACTjD,EAAEyB,EAAEoB,SAASpC,EAAYI,QAAUb,EAAEyB,EAAEoB,SAAShC,QAAU,QAAU,UAAUJ,GAC9EyB,EAAagB,IAAIzC,GAAa0B,UACtBD,EAAaU,GAAGnB,EAAEoB,UAAa7C,EAAEyB,EAAEoB,SAAS7B,SAASV,EAAQM,OAAOuC,SAC5EjB,EAAaC,SACbnC,EAAEyB,EAAEoB,SAASO,OAAO3C,KAG5B4C,QAAU,SAAS5B,GACfS,EAAaoB,OAAO,YAAYC,MAAMxB,GACtCA,EAASE,OACTC,EAAaC,SAEbJ,EAAW,QAInBjB,EAAW0C,KAAK,QAASlD,EAAQM,OACjCsB,EAAeA,EAAauB,IAAIhD,GAC5BH,EAAQE,aACRR,EAAEM,EAAQE,aAAaiD,IAAIC,MAAMF,KAAK,cAAelD,EAAQE,cAI7DmD,OAAS,cAgBjB,QAASC,KACP,MAAOA,GAxIT,GA2BI7B,GAAUG,GA3BLrC,EAAQgE,GACPhE,EAAQiE,IACPnE,EAAMoE,KACApE,EAAMqE,WACVpE,EAAKqE,aACHnE,EAAOoE,SACTtE,EAAKmD,OACPoB,MAAMC,UAAUC,KACjBF,MAAMC,UAAUE,IAEbrE,EAAQsE,OAAOC,SACxBC,UAAc,SAEdC,OAAS,aAITC,QAAU,aAIVC,QAAU,eAMe5E,IAsH7B,OAnBAA,GAAE6E,GAAGzE,SAAW,SAASE,GAIrB,MAHAA,GAAUb,EAAMc,OACZC,aAAa,GACdF,GACIoD,KAAKoB,KAAK,WACb1E,EAASsD,KAAKpD,MAQtBb,EAAMc,MAAMqD,GAERxD,SAAWA,IAIRZ,EAASoE,OAASA","file":"../sorter.js","sourcesContent":["define([\r\n    \"./interact\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils/noder\",\r\n    \"skylark-utils/datax\",\r\n    \"skylark-utils/geom\",\r\n    \"skylark-utils/eventer\",\r\n    \"skylark-utils/styler\",\r\n    \"skylark-utils/dnd\",\r\n    \"skylark-utils/query\",\r\n    \"skylark-utils/widgets\",\r\n    \"./mover\",\r\n    \"./resizer\"\r\n],function(interact, langx,noder,datax,geom,eventer,styler,dnd,$,widgets,mover,resizer){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = widgets.Widget.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    /*\r\n     * @param {HTMLElement} container  the element to use as a sortable container\r\n     * @param {Object} options  options object\r\n     * @param {String} [options.items = \"\"] \r\n     * @param {Object} [options.connectWith =] the selector to create connected lists\r\n     * @param {Object} [options\r\n     * @param {Object} [options\r\n     */\r\n    function sortable(container,options) {\r\n        options = langx.mixin({\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n\r\n        },options);\r\n\r\n        var isHandle, index, \r\n            $container = $(container), \r\n            $items = $container.children(options.items);\r\n        var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n            \"class\" : options.placeholderClass\r\n        }));\r\n\r\n        dnd.draggable(container,{\r\n            source : options.items,\r\n            handle : options.handle,\r\n            draggingClass : options.draggingClass,\r\n            preparing : function(e) {\r\n                //e.dragSource = e.handleElm;\r\n            },\r\n            started :function(e) {\r\n                e.ghost = e.dragSource;\r\n                e.transfer = {\r\n                    \"text\": \"dummy\"\r\n                };\r\n                index = (dragging = $(e.dragSource)).index();\r\n            },\r\n            ended : function(e) {\r\n                if (!dragging) {\r\n                    return;\r\n                }\r\n                dragging.show();\r\n                placeholders.detach();\r\n                if (index != dragging.index()) {\r\n                    dragging.parent().trigger('sortupdate', {item: dragging});\r\n                }\r\n                dragging = null;                \r\n            }\r\n\r\n        });\r\n\r\n        \r\n        dnd.droppable(container,{\r\n            started: function(e) {\r\n                e.acceptable = true;\r\n                e.activeClass = \"active\";\r\n                e.hoverClass = \"over\";\r\n            },\r\n            overing : function(e) {\r\n                if ($items.is(e.overElm)) {\r\n                    if (options.forcePlaceholderSize) {\r\n                        placeholder.height(dragging.outerHeight());\r\n                    }\r\n                    dragging.hide();\r\n                    $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                    placeholders.not(placeholder).detach();\r\n                } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                    placeholders.detach();\r\n                    $(e.overElm).append(placeholder);\r\n                }                \r\n            },\r\n            dropped : function(e) {\r\n                placeholders.filter(':visible').after(dragging);\r\n                dragging.show();\r\n                placeholders.detach();\r\n\r\n                dragging = null;                \r\n              }\r\n        });\r\n\r\n        $container.data('items', options.items)\r\n        placeholders = placeholders.add(placeholder);\r\n        if (options.connectWith) {\r\n            $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n        }\r\n        \r\n        return {\r\n            remove : function() {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    $.fn.sortable = function(options) {\r\n        options = langx.mixin({\r\n            connectWith: false\r\n        }, options);\r\n        return this.each(function() {\r\n            sortable(this,options);\r\n        });\r\n    };\r\n\r\n    function sorter(){\r\n      return sorter;\r\n    }\r\n\r\n    langx.mixin(sorter, {\r\n\r\n        sortable : sortable\r\n\r\n    });\r\n\r\n    return interact.sorter = sorter;\r\n});\r\n"]}