{"version":3,"sources":["resizer.js"],"names":["define","skylark","langx","noder","datax","finder","geom","eventer","mover","styler","$","resizable","elm","params","defaultOptions","touchActionNone","direction","top","left","right","bottom","handle","border","grabber","selector","handleEl","startSize","currentSize","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","isString","find","isHtmlNode","movable","auto","e","size","width","deltaX","height","deltaY","remove","off","resizer","on","attr","removeAttr","pagePosition","addClass","Array","prototype","some","map","fn","this","each","el","mixin"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,sBACA,sBACA,uBACA,qBACA,wBACA,UACA,uBACA,uBACF,SAASC,EAASC,EAAMC,EAAMC,EAAMC,EAAOC,EAAKC,EAAQC,EAAMC,EAAOC,GAanE,QAASC,GAAUC,EAAKC,GAEpB,GAAIC,IAEAC,iBAAiB,EAEjBC,WACIC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,QAAQ,GAGZC,QACIC,QAAS,EACTC,QAAS,GACTC,UAAU,GAIlBX,GAASA,KACT,IACIY,GAEAC,EACAC,EAJAN,EAASR,EAAOQ,WAEhBL,EAAYH,EAAOG,WAAaF,EAAeE,UAG/CY,EAAkBf,EAAOgB,QACzBC,EAAiBjB,EAAOkB,OACxBC,EAAkBnB,EAAOoB,OA2C7B,OAzCI/B,GAAMgC,SAASb,GACfI,EAAWpB,EAAO8B,KAAKvB,EAAIS,GACpBnB,EAAMkC,WAAWf,KACxBI,EAAWJ,GAEfb,EAAM6B,QAAQZ,GACVa,MAAO,EACPT,QAAU,SAASU,GACfb,EAAYpB,EAAKkC,KAAK5B,GAClBgB,GACAA,EAAgBW,IAGxBR,OAAS,SAASQ,GACdZ,KAEIX,EAAUE,MAAQF,EAAUG,MAC5BQ,EAAYc,MAAQf,EAAUe,MAAQF,EAAEG,OAExCf,EAAYc,MAAQf,EAAUe,MAG9BzB,EAAUC,KAAOD,EAAUI,OAC3BO,EAAYgB,OAASjB,EAAUiB,OAASJ,EAAEK,OAE1CjB,EAAYgB,OAASjB,EAAUiB,OAGnCrC,EAAKkC,KAAK5B,EAAIe,GAEVG,GACAA,EAAeS,IAGvBN,QAAS,SAASM,GACVP,GACAA,EAAgBO,OAOxBM,OAAQ,WACJtC,EAAQuC,IAAIrB,KAYxB,QAASsB,KACP,MAAOA,GAnGAxC,EAAQyC,GACPzC,EAAQuC,IACP1C,EAAM6C,KACA7C,EAAM8C,WACV5C,EAAK6C,aACH1C,EAAO2C,SACT9C,EAAKqC,OACPU,MAAMC,UAAUC,KACjBF,MAAMC,UAAUE,GAkG1B,OAdA9C,GAAE+C,GAAG9C,UAAY,SAASE,GACtB6C,KAAKC,KAAK,SAASC,GACfjD,EAAU+C,KAAK7C,MAQvBX,EAAM2D,MAAMd,GACRpC,UAAWA,IAGRV,EAAQ8C,QAAUA","file":"../resizer.js","sourcesContent":["define([\n    \"skylark-utils/skylark\",\n    \"skylark-utils/langx\",\n    \"skylark-utils/noder\",\n    \"skylark-utils/datax\",\n    \"skylark-utils/finder\",\n    \"skylark-utils/geom\",\n    \"skylark-utils/eventer\",\n    \"./mover\",\n    \"skylark-utils/styler\",\n    \"skylark-utils/query\"\n],function(skylark, langx,noder,datax,finder,geom,eventer,mover,styler,$){\n    var on = eventer.on,\n        off = eventer.off,\n        attr = datax.attr,\n        removeAttr = datax.removeAttr,\n        offset = geom.pagePosition,\n        addClass = styler.addClass,\n        height = geom.height,\n        some = Array.prototype.some,\n        map = Array.prototype.map;\n\n\n\n    function resizable(elm, params) {\n\n        var defaultOptions = {\n            // prevents browser level actions like forward back gestures\n            touchActionNone: true,\n\n            direction : {\n                top: false, \n                left: false, \n                right: true, \n                bottom: true\n            },\n            // selector for handle that starts dragging\n            handle : {\n                border : true,\n                grabber: \"\",\n                selector: true\n            }\n        };\n\n        params = params || {};\n        var handle = params.handle || {},\n            handleEl,\n            direction = params.direction || defaultOptions.direction,\n            startSize,\n            currentSize,\n            startedCallback = params.started,\n            movingCallback = params.moving,\n            stoppedCallback = params.stopped;\n\n        if (langx.isString(handle)) {\n            handleEl = finder.find(elm,handle);\n        } else if (langx.isHtmlNode(handle)) {\n            handleEl = handle;\n        }\n        mover.movable(handleEl,{\n            auto : false,\n            started : function(e) {\n                startSize = geom.size(elm);\n                if (startedCallback) {\n                    startedCallback(e);\n                }\n            },\n            moving : function(e) {\n                currentSize = {\n                };\n                if (direction.left || direction.right) {\n                    currentSize.width = startSize.width + e.deltaX;\n                } else {\n                    currentSize.width = startSize.width;\n                }\n\n                if (direction.top || direction.bottom) {\n                    currentSize.height = startSize.height + e.deltaY;\n                } else {\n                    currentSize.height = startSize.height;\n                }\n\n                geom.size(elm,currentSize);\n\n                if (movingCallback) {\n                    movingCallback(e);\n                }\n            },\n            stopped: function(e) {\n                if (stoppedCallback) {\n                    stoppedCallback(e);\n                }                \n            }\n        });\n        \n        return {\n            // destroys the dragger.\n            remove: function() {\n                eventer.off(handleEl);\n            }\n        }\n\n    }\n\n    $.fn.resizable = function(params) {\n        this.each(function(el){\n            resizable(this,params);\n        });\n    };\n\n    function resizer(){\n      return resizer;\n    }\n\n    langx.mixin(resizer, {\n        resizable: resizable\n    });\n\n    return skylark.resizer = resizer;\n});\n"]}