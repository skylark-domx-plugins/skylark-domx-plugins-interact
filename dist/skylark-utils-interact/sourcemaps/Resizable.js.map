{"version":3,"sources":["Resizable.js"],"names":["define","langx","noder","datax","finder","geom","eventer","styler","$","plugins","interact","Movable","Resizable","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","Plugin","inherit","klassName","pluginName","options","touchActionNone","direction","top","left","right","bottom","handle","border","grabber","selector","_construct","elm","this","overrided","handleEl","startSize","currentSize","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","isString","find","isHtmlNode","auto","e","size","width","deltaX","deltaY","_handleEl","remove","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,0BACA,0BACA,2BACA,yBACA,4BACA,2BACA,0BACA,4BACA,aACA,aACF,SAASC,EAAMC,EAAMC,EAAMC,EAAOC,EAAKC,EAAQC,EAAOC,EAAEC,EAAQC,EAASC,GACvE,GAWIC,IAXKN,EAAQO,GACPP,EAAQQ,IACPX,EAAMY,KACAZ,EAAMa,WACVX,EAAKY,aACHV,EAAOW,SACTb,EAAKc,OACPC,MAAMC,UAAUC,KACjBF,MAAMC,UAAUE,IAGVd,EAAQe,OAAOC,SAC3BC,UAAW,YAEXC,WAAe,iBAEfC,SAEIC,iBAAiB,EAEjBC,WACIC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,QAAQ,GAGZC,QACIC,QAAS,EACTC,QAAS,GACTC,UAAU,IAIlBC,WAAY,SAAUC,EAAKZ,GACvBa,KAAKC,UAAUF,EAAIZ,GAGnBA,EAAUa,KAAKb,OACf,IACIe,GAEAC,EACAC,EAJAV,EAASP,EAAQO,WAEjBL,EAAYF,EAAQE,UAGpBgB,EAAkBlB,EAAQmB,QAC1BC,EAAiBpB,EAAQqB,OACzBC,EAAkBtB,EAAQuB,OAE1BlD,GAAMmD,SAASjB,GACfQ,EAAWvC,EAAOiD,KAAKb,EAAIL,GACpBlC,EAAMqD,WAAWnB,KACxBQ,EAAWR,GAEfxB,EAAQgC,GACJY,MAAO,EACPR,QAAU,SAASS,GACfZ,EAAYvC,EAAKoD,KAAKjB,GAClBM,GACAA,EAAgBU,IAGxBP,OAAS,SAASO,GACdX,KAEIf,EAAUE,MAAQF,EAAUG,MAC5BY,EAAYa,MAAQd,EAAUc,MAAQF,EAAEG,OAExCd,EAAYa,MAAQd,EAAUc,MAG9B5B,EAAUC,KAAOD,EAAUI,OAC3BW,EAAY1B,OAASyB,EAAUzB,OAASqC,EAAEI,OAE1Cf,EAAY1B,OAASyB,EAAUzB,OAGnCd,EAAKoD,KAAKjB,EAAIK,GAEVG,GACAA,EAAeQ,IAGvBL,QAAS,SAASK,GACVN,GACAA,EAAgBM,MAK5Bf,KAAKoB,UAAYlB,GAIrBmB,OAAQ,WACJxD,EAAQQ,IAAI2B,KAAKoB,cAMzB,OAFApD,GAAQsD,SAASnD,EAAU,aAEpBF,EAASE,UAAYA","file":"../Resizable.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/datax\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/styler\",\r\n    \"skylark-utils-dom/query\",\r\n    \"skylark-utils-dom/plugins\",\r\n    \"./interact\",\r\n    \"./Movable\"\r\n],function(langx,noder,datax,finder,geom,eventer,styler,$,plugins,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    var Resizable = plugins.Plugin.inherit({\r\n        klassName: \"Resizable\",\r\n\r\n        \"pluginName\" : \"lark.resizable\",\r\n        \r\n        options : {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n\r\n            direction : {\r\n                top: false, \r\n                left: false, \r\n                right: true, \r\n                bottom: true\r\n            },\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        },\r\n\r\n        _construct :function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n            options = this.options;\r\n            var handle = options.handle || {},\r\n                handleEl,\r\n                direction = options.direction,\r\n                startSize,\r\n                currentSize,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped;\r\n\r\n            if (langx.isString(handle)) {\r\n                handleEl = finder.find(elm,handle);\r\n            } else if (langx.isHtmlNode(handle)) {\r\n                handleEl = handle;\r\n            }\r\n            Movable(handleEl,{\r\n                auto : false,\r\n                started : function(e) {\r\n                    startSize = geom.size(elm);\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n                moving : function(e) {\r\n                    currentSize = {\r\n                    };\r\n                    if (direction.left || direction.right) {\r\n                        currentSize.width = startSize.width + e.deltaX;\r\n                    } else {\r\n                        currentSize.width = startSize.width;\r\n                    }\r\n\r\n                    if (direction.top || direction.bottom) {\r\n                        currentSize.height = startSize.height + e.deltaY;\r\n                    } else {\r\n                        currentSize.height = startSize.height;\r\n                    }\r\n\r\n                    geom.size(elm,currentSize);\r\n\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n                stopped: function(e) {\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }                \r\n                }\r\n            });\r\n            \r\n            this._handleEl = handleEl;\r\n        },\r\n\r\n        // destroys the dragger.\r\n        remove: function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Resizable,\"resizable\");\r\n\r\n    return interact.Resizable = Resizable;\r\n});\r\n"]}